"""
research_writing_agent - A research writing agent that conducts literature discovery, summarizes findings, and drafts structured research sections (e.g., background, methods, results, discussion). It can query specified sources, synthesize evidence, and produce well-cited, publication-ready prose with configurable depth and format.
Generated by RunAgent Generator
"""

from typing import List, TypedDict, Any
from langchain_core.messages import HumanMessage
from langchain_openai import ChatOpenAI
from langgraph.graph import END, StateGraph

class AgentState(TypedDict):
    input_data: dict
    result: str

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.3)

def process_agent(state: AgentState) -> AgentState:
    """Main processing function for research_writing_agent"""
    
    input_data = state.get('input_data', {})
    
    # Extract relevant inputs
    extracted_info = []
    for field in ["topic", "research_question", "depth", "sources", "citation_style", "sections", "audience", "max_words", "include_abstract", "deadline"]:
        if field in input_data:
            extracted_info.append(f"{field}: {input_data[field]}")
    
    input_summary = "\n".join(extracted_info) if extracted_info else "No specific input provided"
    
    prompt = f"""
    A research writing agent that conducts literature discovery, summarizes findings, and drafts structured research sections (e.g., background, methods, results, discussion). It can query specified sources, synthesize evidence, and produce well-cited, publication-ready prose with configurable depth and format.
    
    Main functionality: Automated literature search, synthesis, and drafting of research write-ups
    
    User input:
    {input_summary}
    
    Please provide a helpful response based on this agent's purpose.
    """
    
    response = llm.invoke([HumanMessage(content=prompt)])
    
    return {**state, "result": response.content}

def create_workflow():
    """Create the agent workflow"""
    workflow = StateGraph(AgentState)
    
    workflow.add_node("process", process_agent)
    workflow.set_entry_point("process") 
    workflow.add_edge("process", END)
    
    return workflow.compile()

# Create workflow
app = create_workflow()

def main(*input_args, **input_kwargs):
    """Main entry point for RunAgent (standard)"""
    
    # Run the workflow
    result = app.invoke({
        "input_data": input_kwargs,
        "result": ""
    })
    
    return result["result"]

def main_stream(*input_args, **input_kwargs):
    """Streaming entry point"""
    
    try:
        for chunk in app.stream({
            "input_data": input_kwargs,
            "result": ""
        }):
            if "result" in chunk.get("process", {}):
                yield chunk["process"]["result"]
            else:
                yield str(chunk)
    except Exception as e:
        yield f"Error: {str(e)}"
